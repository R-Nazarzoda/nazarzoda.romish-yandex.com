#include <iostream> 
using namespace std; 

struct elem
{
	char s;
	int value;
	elem* next = nullptr;
};

void push(elem*& stack, char s, int value) //Добавление элемента в стек
{
	elem* newel = new elem;
	newel->value = value;
	newel->s = s;
	if (!stack) {
		stack = newel;
		return;
	}
	newel->next = stack;
	stack = newel;
}

bool pop(elem*& stack, char& s, int& value) //Удаление элемента из стека с возвратом хранимого значения
{
	if (!stack) {
		cout << "empty";
		return false;
	}
	elem* cur = stack;
	value = cur->value;
	s = cur->s;
	stack = cur->next;
	delete cur;
	return true;
}

void showStack(elem*& stack) //ввывод стека
{

	while (stack) {
		int value;
		char s;
		if (pop(stack, s, value)) {
			cout << value << " ";
			cout << s;
		}
	}
}

bool peek(elem* stack, char& s, int& value)//cмотрит на вершину и записывает её значение 
{
	if (!stack)
	{
		return false;
	}
	else
	{
		s = stack->s;
		value = stack->value;
		return true;
	}
}
bool is_bracket(char* str, int i)
{
	if (str[i] == '[' || str[i] == ']' || str[i] == '(' || str[i] == ')' || str[i] == '{' || str[i] == '}' || str[i] == '<' || str[i] == '>') {
		return true;
	}
	else return false;
}
bool is_open_bracket(char* str, int i)
{
	if (str[i] == '[' || str[i] == '(' || str[i] == '{' || str[i] == '<') {
		return true;
	}
	else return false;
}

char opp_bracket(char* str, int i)
{

	if (str[i] == '[') {
		return ']';
	}
	if (str[i] == '(') {
		return ')';
	}
	if (str[i] == '{') {
		return '}';
	}
	if (str[i] == '<') {
		return '>';
	}
}

int main() {
    setlocale(LC_ALL, "Rus");
    elem* stack = nullptr;
    char* str = new char[50];
    cin >> str;
    for (int i = 0; i <= strlen(str); i++)
    {
        if (is_bracket(str, i))
        {
            if (is_open_bracket(str, i))
            {
                char ch = opp_bracket(str, i);
                push(stack, ch, i);
            }
            else
            {
                if (stack != 0 && str[i] != 0) {
                    char b;
                    int n;
                    if (pop(stack, b, n)) {
                        if (b == str[i]) {
                            continue;
                        }
                        else
                        {
                            cout << "ошибка" << endl;
                            cout << i;
                            break;
                        }
                    }

                }
                else if (stack == 0 && str[i] != 0)
                {
                    cout << "ошибка" << endl;
                    cout << i;
                    break;
                }
            }
        }if (str[i] == 0 && stack != 0)
        {
            cout << "ошибка" << endl;
            cout << i;
            break;
        }
        if (stack == 0 && str[i] == '\0') {
            cout << "все ок";
        }
    }
}
